basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      password:
        type: string
      role:
        type: string
      token:
        type: string
      updated_at:
        type: string
    type: object
  models.UserListResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: Log in user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /logout:
    get:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Log out a user
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Sign up user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Sign up a new user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get the list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
      summary: Get users
      tags:
      - users
  /validate:
    get:
      consumes:
      - application/json
      description: Validate the current user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Validate user token
      tags:
      - auth
swagger: "2.0"
