basePath: /
definitions:
  models.Advice:
    properties:
      created_at:
        type: string
      description:
        type: string
      donor_id:
        type: integer
      id:
        type: integer
      rating:
        type: integer
      receiver_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Group:
    type: object
  models.GroupListResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
    type: object
  models.GroupUser:
    type: object
  models.Hike:
    properties:
      average_rating:
        type: number
      created_at:
        example: "2024-05-28T12:54:10.517438+02:00"
        type: string
      description:
        example: La rando de zinzin
        maxLength: 500
        type: string
      difficulty:
        enum:
        - Easy
        - Moderate
        - Hard
        example: Intermediate
        type: string
      duration:
        example: 3 hours
        type: string
      gpx_file:
        example: hike.gpx
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        example: 1
        type: integer
      image:
        example: hike_image.jpg
        type: string
      is_approved:
        default: false
        example: false
        type: boolean
      name:
        example: Montagne du destin
        maxLength: 100
        type: string
      organizer_id:
        example: 1
        type: integer
      subscriptions:
        items:
          $ref: '#/definitions/models.Subscription'
        type: array
      updated_at:
        example: "2024-05-28T12:54:10.517438+02:00"
        type: string
    required:
    - description
    - difficulty
    - duration
    - name
    - organizer_id
    type: object
  models.Review:
    properties:
      comment:
        maxLength: 280
        type: string
      created_at:
        type: string
      hike_id:
        type: integer
      id:
        type: integer
      rating:
        maximum: 5
        minimum: 1
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    required:
    - hike_id
    - rating
    - user_id
    type: object
  models.Subscription:
    properties:
      created_at:
        example: "2024-05-28T12:54:10.517438+02:00"
        type: string
      hike_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - hike_id
    - user_id
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    properties:
      advice_donor:
        $ref: '#/definitions/models.Advice'
      advice_receiver:
        $ref: '#/definitions/models.Advice'
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: integer
      is_verified:
        type: boolean
      password:
        type: string
      profile_image:
        type: string
      role:
        type: string
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserListResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /advice:
    post:
      consumes:
      - application/json
      description: Create a new advice
      parameters:
      - description: Create advice
        in: body
        name: advice
        required: true
        schema:
          $ref: '#/definitions/models.Advice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Advice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new advice
      tags:
      - advice
  /advice/{id}:
    delete:
      consumes:
      - application/json
      description: Delete advice
      parameters:
      - description: Advice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete advice
      tags:
      - advice
    patch:
      consumes:
      - application/json
      description: Update advice
      parameters:
      - description: Advice ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update advice
        in: body
        name: advice
        required: true
        schema:
          $ref: '#/definitions/models.Advice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update advice
      tags:
      - advice
  /advice/{id}/donor:
    get:
      consumes:
      - application/json
      description: Get advice by donor
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Advice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get advice by donor
      tags:
      - advice
  /advice/{id}/receiver:
    get:
      consumes:
      - application/json
      description: Get advice by receiver
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Advice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get advice by receiver
      tags:
      - advice
  /groups:
    get:
      consumes:
      - application/json
      description: Get all groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GroupListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group with the input payload
      parameters:
      - description: Group Info
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new group
      tags:
      - groups
  /groups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a group by ID
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Get details of a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a group by ID
      tags:
      - groups
    patch:
      consumes:
      - application/json
      description: Update details of a group by its ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group Info
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a group by ID
      tags:
      - groups
  /groups/leave:
    delete:
      consumes:
      - application/json
      description: Leave a group
      parameters:
      - description: Group User Info
        in: body
        name: groupUser
        required: true
        schema:
          $ref: '#/definitions/models.GroupUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Leave a group
      tags:
      - groups
  /groups/user/{id}:
    get:
      consumes:
      - application/json
      description: Get groups by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get groups by user ID
      tags:
      - groups
  /groups/validate/{id}:
    patch:
      consumes:
      - application/json
      description: Validate a user in a group
      parameters:
      - description: GroupUser ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Validate a user in a group
      tags:
      - groups
  /hikes:
    get:
      consumes:
      - application/json
      description: Get details of all hikes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hike'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all hikes
      tags:
      - hikes
    post:
      consumes:
      - multipart/form-data
      description: Create a new hike with the input payload and optional image upload
      parameters:
      - description: Hike Name
        in: formData
        name: name
        required: true
        type: string
      - description: Hike Description
        in: formData
        name: description
        required: true
        type: string
      - description: Organizer ID
        in: formData
        name: organizer_id
        required: true
        type: integer
      - description: Difficulty
        in: formData
        name: difficulty
        required: true
        type: string
      - description: Duration
        in: formData
        name: duration
        required: true
        type: string
      - description: Is Approved
        in: formData
        name: is_approved
        type: boolean
      - description: Hike Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Hike'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new hike
      tags:
      - hikes
  /hikes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a hike by its ID
      parameters:
      - description: Hike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a hike by ID
      tags:
      - hikes
    get:
      consumes:
      - application/json
      description: Get details of a hike by its ID
      parameters:
      - description: Hike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Hike'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a hike by ID
      tags:
      - hikes
    put:
      consumes:
      - multipart/form-data
      description: Update details of a hike by its ID and optional image upload
      parameters:
      - description: Hike ID
        in: path
        name: id
        required: true
        type: integer
      - description: Hike Name
        in: formData
        name: name
        required: true
        type: string
      - description: Hike Description
        in: formData
        name: description
        required: true
        type: string
      - description: Organizer ID
        in: formData
        name: organizer_id
        required: true
        type: integer
      - description: Difficulty
        in: formData
        name: difficulty
        required: true
        type: string
      - description: Duration
        in: formData
        name: duration
        required: true
        type: string
      - description: Is Approved
        in: formData
        name: is_approved
        type: boolean
      - description: Hike Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Hike'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a hike by ID
      tags:
      - hikes
  /hikes/{id}/validate:
    patch:
      consumes:
      - application/json
      description: Validate a hike by its ID
      parameters:
      - description: Hike ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Validate a hike by ID
      tags:
      - hikes
  /hikes/notValidated:
    get:
      consumes:
      - application/json
      description: Get details of all hikes not validated
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hike'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all hikes not validated
      tags:
      - hikes
  /hikes/subscribe:
    post:
      consumes:
      - application/json
      description: Post a subscription to a hike
      parameters:
      - description: Hike ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: formData
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Post a subscription to a hike
      tags:
      - hikes
  /login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: Log in user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /logout:
    get:
      consumes:
      - application/json
      description: Log out the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Log out a user
      tags:
      - auth
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review for a hike
      parameters:
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new review
      tags:
      - reviews
  /reviews/{id}:
    put:
      consumes:
      - application/json
      description: Update details of a review by its ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.Review'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a review by ID
      tags:
      - reviews
  /reviews/hike/{hike_id}:
    get:
      consumes:
      - application/json
      description: Get all reviews for a specific hike
      parameters:
      - description: Hike ID
        in: path
        name: hike_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get reviews for a hike
      tags:
      - reviews
  /reviews/user/{user_id}/hike/{hike_id}:
    get:
      consumes:
      - application/json
      description: Get the review by a specific user for a specific hike
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Hike ID
        in: path
        name: hike_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a review by user and hike
      tags:
      - reviews
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Sign up user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Sign up a new user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get the list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
      summary: Get users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User profile
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user profile
      tags:
      - users
  /users/{id}/role:
    patch:
      consumes:
      - application/json
      description: Update the role of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User role
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update user role
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the profile of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user profile
      tags:
      - users
  /validate:
    patch:
      consumes:
      - application/json
      description: Validate the current user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Validate user token
      tags:
      - auth
swagger: "2.0"
